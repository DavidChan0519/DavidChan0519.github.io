<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Net-SNMP企业节点动态库编辑]]></title>
    <url>%2F2019%2F03%2F29%2Fenterprise-priv%2F</url>
    <content type="text"><![CDATA[查阅net-snmp的相关资料，目前Net-SNMP有多种使用方式。这里只介绍snmpd + 企业私有节点动态库的方式。目前这种方式也在多数企业中得到广泛使用。 这种使用方式的优点在与，不修改net-snmp源码；第一次交叉编译后，后面修复企业私有库的bug不需要再重新编译net-snmp源码，仅仅只需要把动态库重新编译一遍就可以了。 编译企业节点动态库在使用mib2c工具自动生成相应代码后，还需要在代码中添加一个启动函数，该启动函数是snmpd守护进程调用企业私有库的入口： 123void init_bmserv(void)｛ xxx｝ 该函数bmserv的命名同生成的动态库名称libbmserv.so要保持一致 交叉编译动态库，makefile如下(根据实际环境进行修改适配)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# ************************************************************# 通用Makefile# ************************************************************CC = aarch64-linux-gnu-gcc# ************************************************************# 编译选项# ************************************************************# 宏定义选项MACRO_FLAGS := # 使用到的库，只要写lib后的名称，不用加.so或.aLIB_FLAGS := curl crypto cjson# 编译.c到.o文件的选项CC_FLAGS := -Wall -fPIC# 连接.o文件用到的选项LINK_FLAGS := -Wall -fPIC -lpthread -shared# ************************************************************# 源代码目录# ************************************************************ROOT := $(shell pwd)SRCDIRS := $(ROOT)# ************************************************************# 头文件目录# ************************************************************INCLUDE_DIRS := $(ROOT)/../../../../prebuilt/3rdparty/curl-7.60.0/include/INCLUDE_DIRS += $(ROOT)/../../../../prebuilt/3rdparty/net-snmp/include/INCLUDE_DIRS += $(ROOT)/../../../../prebuilt/3rdparty/cJSON/include/# ************************************************************# 动态库、静态库目录# ************************************************************LIB_DIRS := $(ROOT)/../../../../prebuilt/3rdparty/curl-7.60.0/lib/arm64/LIB_DIRS += $(ROOT)/../../../../prebuilt/3rdparty/net-snmp/lib/arm64/LIB_DIRS += $(ROOT)/../../../../prebuilt/3rdparty/cJSON/lib/arm64/LIB_DIRS += $(ROOT)/../../../../prebuilt/3rdparty/openssl/lib/arm64/# ************************************************************# 最终生成的程序名称# ************************************************************TARGET := libbmserv.so# ************************************************************# 被编译的.c文件# ************************************************************SRC_C := $(foreach dir, $(SRCDIRS), $(wildcard $(dir)/*.c))# ************************************************************# 所有的.o文件# ************************************************************OBJ_C := $(notdir $(patsubst %.c, %.o, $(SRC_C)))# ************************************************************# 编译规则# ************************************************************.PHONY: all cmd_init cmd_last cleanall:cmd_init $(TARGET) cmd_last# 编译前命令cmd_init: @echo "SRC DIR:" $(SRCDIRS) @echo cmd_init# 编译后命令cmd_last: @echo cmd_lastVPATH = $(SRCDIRS)$(TARGET):$(OBJ_C) $(CC) $(LINK_FLAGS) $(MACRO_FLAGS:%=-D%) $(INCLUDE_DIRS:%=-I%) $(LIB_DIRS:%=-L%) -o $@ $^ $(LIB_FLAGS:%=-l%) $(OBJ_C):%.o:%.c $(CC) $(CC_FLAGS) $(MACRO_FLAGS:%=-D%) $(INCLUDE_DIRS:%=-I%) -c -o $@ $&lt;clean: rm -f *.o rm -f $(TARGET) 编译 1$make 即可生成企业私有节点动态库libbmserv.so]]></content>
  </entry>
  <entry>
    <title><![CDATA[Net-SNMP ARM部署]]></title>
    <url>%2F2019%2F03%2F29%2Fnet-snmp-deployment%2F</url>
    <content type="text"><![CDATA[交叉编译 net-snmp交叉编译，生成snmpd 交叉编译企业私有节点动态库 libbmserv.so 修改配置文件snmpd.conf1234567891011121314151617181920212223242526272829############################################################################ snmpd.conf###########################################################################dlmod bmserv /usr/lib/libbmserv.so#v1/v2crocommunity rrrrrrwcommunity wwww#v1 traptrapsink 10.30.33.2 rrrrr#v2c traptrap2sink 10.30.33.2 rrrrr#v2c informinformsink 10.30.33.2 rrrrr#v3engineIDType 3rouser rouser privcreateUser rouser MD5 11111111 DES 22222222rwuser rwuser privcreateUser rwuser MD5 33333333 DES 44444444# v3 traptrapsess -v 3 -u rouser -a MD5 -A 11111111 -x DES -X 22222222 -l priv 192.168.1.111 ARM部署将snmpd，libbmserv.so，snmpd.conf及相关的net-snmp库文件打包，然后放到arm开发环境。 snmpd一般放在/bin目录下，snmpd.conf一般放在/etc/snmp/config目录下(没有的话，可自己建立相应的目录) libbmserv.so及net-snmp的动态库文件都可以放在/usr/local/lib下，私有mib文件及公共mib文件都放在/usr/share/mibs下，通过MIBS环境变量指定路径 1$export MIBS=/home/lwang/work/chengw/github/net-snmp-x86/MIB/Bitmain.mib 手动启动1$snmpd -f -c /etc/snmp/config/snmpd.conf 自启动利用systemd机制，编写snmpd.service文件(xxx.service是snmp依赖的服务,根据实际情况修改) 12345678910111213141516[Unit]Description=Simple Network Management Protocol (SNMP) DaemonAfter=syslog.target network.target xxx.serviceRequires=xxx.service[Service]Environment=LD_LIBRARY_PATH=/usr/libEnvironment=MIBDIRS=/usr/share/snmp/mibsType=simplePIDFile=/var/run/snmpd.pidExecStart=/bin/snmpd -f -c /etc/snmp/config/snmpd.conf -p /var/run/snmpd.pidRestart=on-failureRestartSec=3[Install]WantedBy=multi-user.target 执行enable命令 1$systemctl enable snmpd 系统下电重启，则SNMP服务会自动启动 其他控制操作1.启动 1$systemctl start snmpd 2.停止 1$systemctl stop snmpd 3.重启 1$systemctl restart snmpd 4.查询 1$systemctl status snmpd]]></content>
  </entry>
  <entry>
    <title><![CDATA[mib2c代码自动生成]]></title>
    <url>%2F2019%2F03%2F29%2Fmib2c%2F</url>
    <content type="text"><![CDATA[要使用mib2c工具自动生成Net-SNMP企业私有库代码，首先必须在开发环境中部署mib2c工具。该工具是net-snmp源码自带的，直接编译net-snmp源码后就可以使用了。 mib2c环境部署1.配置 1$./configure 2.编译 1$make 3.安装（如果没有在configure指定安装目录，则会安装到系统默认目录/usr/local/net-snmp） 1$make install mib2c生成代码1.设置环境变量，将需要生成代码的企业私有mib(xxx.mib)路径导出到环境变量 1$export MIBS=/home/lwang/work/chengw/github/net-snmp-x86/MIB/demo.mib 2.为leaf节点生成代码(xxx为demo.mib文件中modIdent节点名称) 1$/usr/local/net-snmp/bin/mib2c -c mib2c.scalar.conf xxx 3.为table节点生成代码 1$/usr/local/net-snmp/bin/mib2c -c mib2c.iterate.conf xxx 4.为notification节点生成代码 1$/usr/local/net-snmp/bin/mib2c -c mib2c.notify.conf xxx 在生成的代码中，添加自己的实现即可]]></content>
  </entry>
  <entry>
    <title><![CDATA[Net-SNMP的交叉编译 for ARM64]]></title>
    <url>%2F2019%2F03%2F29%2Fnet-snmp%2F</url>
    <content type="text"><![CDATA[1.交叉编译openssl去官网（https://www.openssl.org/source/）下载openssl-1.0.2q.tar.gz，解压缩到目录/home/lwang/work/chengw/github/下，然后进入openssl目录按照如下步骤操作 1) 配置编译选项 1$./config no-asm shared --cross-compile-prefix=aarch64-linux-gnu- --prefix=/home/lwang/work/chengw/github/openssl-1.1.1a/release 其中参数的含义为：no-asm：在交叉编译过程中不使用汇编代码代码加速编译过程；shared：生成动态链接库；–prefix：指定生成lib、include、bin三个核心目录的路径，不修改此项则默认为OPENSSLDIR目录。 2) 修改生成的Makefile，去掉-m64选项，否则会编译报错3) 编译 1$make -j4 4) 安装 1$make install 最终编译生成的头文件和lib文件都位于当前release目录下 2.交叉编译net-snmp在官网(http://www.net-snmp.org/download.html)下载net-snmp-5.7.3.tar.gz，解压缩到/home/lwang/work/chengw/github/目录，然后进入net-snmp目录,并按照如下步骤操作 1) 配置编译选项 1$./configure --host=arm-linux --target=arm-linux --build=i686-linux --with-cc=aarch64-linux-gnu-gcc --with-ar=aarch64-linux-gnu-ar --prefix=/home/lwang/work/chengw/github/net-snmp-5.7.3/release --with-endianness=little --disable-manuals --disable-embedded-perl --disable-perl-cc-checks --without-perl-modules --disable-scripts --disable-applications --with-openssl=/home/lwang/work/chengw/github/openssl-1.0.2q/release 2) 编译 1$make -j4 3) 安装 1$make install 最终编译生成的头文件和lib文件都位于当前release目录下 注意：实际测试发现，net-snmp 5.7.3只能搭配openssl-1.0.2q版本使用，更新的版本会编译报错.]]></content>
  </entry>
</search>
